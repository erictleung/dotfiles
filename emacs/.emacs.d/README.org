#+TITLE: Emacs literate configuration
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :comments yes :results silent :tangle yes

*Inspiration*:

- https://pages.sachachua.com/.emacs.d/Sacha.html :: extensive literate configuration
- https://github.com/zamansky/dot-emacs :: example configuration with YouTube tutorials
- https://github.com/rememberYou/.emacs.d :: great tips in README and variety of packages used
- https://orgmode.org/worg/org-hacks.html :: amazing list of tips and tricks using org-mode
- https://github.com/DiegoVicen/my-emacs
- https://github.com/KaratasFurkan/.emacs.d
- https://github.com/alhassy/emacs.d
- https://jonathanabennett.github.io/blog/2019/05/28/emacs.org-~-may-2019/
- https://github.com/WolfeCub/dotfiles

* Explore packages

- annotate.el :: add arbitrary annotations to file https://github.com/bastibe/annotate.el
- bash-completion :: https://github.com/szermatt/emacs-bash-completion
- benchmark-init-el :: https://github.com/dholm/benchmark-init-el (similar to esup)
- centaur-tabs :: tabs plugin https://github.com/ema2159/centaur-tabs
- counsel-org-clock :: https://github.com/akirak/counsel-org-clock
- csv-mode :: https://elpa.gnu.org/packages/csv-mode.html
- dash :: modern list library https://github.com/magnars/dash.el
- diminish :: save display space for minor modes list https://github.com/myrjola/diminish.el
- dired-ranger :: help with directory management https://github.com/ralesi/ranger.el
- dump-jump :: https://github.com/jacktasia/dumb-jump
- elfeed-score :: score elfeed entries https://github.com/sp1ff/elfeed-score
- EMMS :: play audio and video inside Emacs https://www.gnu.org/software/emms/
- emacs-calfw :: calendar framework https://github.com/kiwanami/emacs-calfw
- emacs-easy-jekyll :: major mode for managing Jekyll https://github.com/masasam/emacs-easy-jekyll
- emacs-jupyter :: https://github.com/dzop/emacs-jupyter
- emmet-mode :: web development shortcuts https://github.com/smihica/emmet-mode
- emacs-presentation-mode :: presentation and live coding https://github.com/zonuexe/emacs-presentation-mode
- emacs-winum :: window numbers https://github.com/deb0ch/emacs-winum
- esup :: Emacs Start Up Profiler https://github.com/jschaf/esup
- flymake-diagnostic-at-point :: https://github.com/meqif/flymake-diagnostic-at-point
- forge :: interact with git like GitHub https://github.com/magit/forge
- helpful :: a better *help* buffer https://github.com/Wilfred/helpful
- highlight :: minor mode to highlight indentation https://github.com/DarthFennec/highlight-indent-guides
- hydra :: make Emacs bindings stick https://github.com/abo-abo/hydra
- iedit :: edit multiple regions, useful for coarse multiple cursor editing https://github.com/victorhge/iedit
- key-quiz :: https://github.com/federicotdn/key-quiz
- lispy :: help with LISP editing https://github.com/abo-abo/lispy
- literate-calc-mode :: literate programming for =M-x calc= https://github.com/sulami/literate-calc-mode.el
- lsp-mode :: language server protocol https://github.com/emacs-lsp/lsp-mode/
- org-cliplink :: insert org-mode links from clipboard https://github.com/rexim/org-cliplink
- org-msg :: compose emails with org-mode https://github.com/jeremy-compostella/org-msg
- org-reveal :: exports org-mode to Reveal.js https://github.com/yjwen/org-reveal/
- org-ql :: org-mode query language https://github.com/alphapapa/org-ql
- org-query :: compose agenda views easier https://github.com/remyhonig/org-query
- origami :: text folding https://github.com/gregsexton/origami.el
- outshine :: bring feel of Org-mode everywhere https://github.com/alphapapa/outshine
- paredit :: http://danmidwood.com/content/2014/11/21/animated-paredit.html
- perspectives :: create named workspaces/perspectives https://github.com/nex3/perspective-el
- poporg :: edit strings/comments in Org mode https://github.com/QBobWatson/poporg
- prescient.el :: effective sorting and filtering https://github.com/raxod502/prescient.el
- selectrum :: incremental narrowing https://github.com/raxod502/selectrum
- smartparens :: deals with parens pairs https://github.com/Fuco1/smartparens
- smerge-mode :: merge tool with git and already installed
- speedbar :: extra frame with information https://www.gnu.org/software/emacs/manual/html_node/emacs/Speedbar.html
- spotify.el :: control Spotify app within Emacs https://github.com/danielfm/spotify.el
- spray :: speed reading mode https://melpa.org/#/spray
- suggest.el :: discover Emacs Lisp functions https://github.com/Wilfred/suggest.el
- wotd :: https://github.com/cute-jumper/emacs-word-of-the-day

* Setup and debugging

Setup debugging and unset them at the end so that if anything breaks, we can jump into the debugger.

#+begin_src emacs-lisp
  ;; Setup debugging configurations
  (setq debug-on-error t
        debug-on-quit t)

  ;; Time setup length
  (defconst emacs-start-time (current-time))
#+end_src

* Package sources

Basic setup for where to add packages from.

#+begin_src emacs-lisp
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
#+end_src

Use =M-x package-refresh-contents= to reload list of packages.

* Interface modifications

** Use better color theme

I've found the [[https://github.com/bbatsov/zenburn-emacs][=zenburn=]] theme sufficient for my needs and is not too tiring on the eyes.

#+begin_src emacs-lisp
  ;; Example:
  ;; http://pragmaticemacs.com/emacs/using-the-zenburn-theme/
  ;; https://github.com/nashamri/spacemacs-theme/issues/42#issuecomment-192128264
  (use-package zenburn-theme
    ;; https://github.com/bbatsov/zenburn-emacs
    ;; :ensure t
    :defer t
    :config
    ;; (load-theme 'zenburn t))
    ;; (add-hook 'after-init-hook (lambda () (load-theme 'zenburn t))))
    (defun etl/load-zenburn-theme ()
      (interactive)
      (load-theme 'zenburn t))
    :bind
    ("C-c o l" . etl/load-zenburn-theme))
  (etl/load-zenburn-theme)
#+end_src

I've gone back and forth on how best to load this theme. Sometimes I use a =:init (load-theme 'zenburn t)=. But in doing so, my theme doesn't load.

Doing some reading around, it appears that we need to delay the loading of the theme [[https://emacs.stackexchange.com/a/19271/18898][because of how Emacs loads its packages]].

** Modify backup system

By default, Emacs creates lots of backup files in the same directory of files you are editing. I still believe in backups, so instead of polluting these files in the same director, let's consolidate them in a separate directory.

#+begin_src emacs-lisp
  ;; Set basic backup settings
  ;; Source: https://stackoverflow.com/a/20824625/6873133
  (setq version-control t     ;; Use version numbers for backups.
        kept-new-versions 10  ;; Number of newest versions to keep.
        kept-old-versions 2   ;; Number of oldest versions to keep.
        delete-old-versions t ;; Don't ask to delete excess backup versions.
        backup-by-copying t)  ;; Copy all files, don't rename them.

  (setq vc-make-backup-files t)

  ;; Default and per-save backups go here:
  (setq backup-directory-alist '((".*" . "~/.emacs.d/backup/per-save")))

  (defun force-backup-of-buffer ()
    "Make a special 'per session' backup at the first save of each Emacs session."
    (when (not buffer-backed-up)
      ;; Override the default parameters for per-session backups.
      (let ((backup-directory-alist '(("" . "~/.emacs.d/backup/per-session")))
            (kept-new-versions 3))
        (backup-buffer)))
    ;; Make a "per save" backup on each save.  The first save results in
    ;; both a per-session and a per-save backup, to keep the numbering
    ;; of per-save backups consistent.
    (let ((buffer-backed-up nil))
      (backup-buffer)))

  (add-hook 'before-save-hook  'force-backup-of-buffer)
  (add-hook 'text-mode-hook 'auto-fill-mode)

  ;; Move autosave files
  ;; https://snarfed.org/gnu_emacs_backup_files
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/\\1" t)))
  (make-directory "~/.emacs.d/autosaves/" t)
#+end_src

** Auto-refresh all buffers when files change

Occasionally, SyncThing will modify my files on my computer when there are no
actual changes to the file. So this setting is to have Emacs refresh the buffer
for me so I don't have to.

See also: https://stackoverflow.com/q/1480572/6873133

#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

** Easier single window navigation

Typically, I only need to move within a single window. And because I'm used to Vim navigation bindings, why not use (most of) them to navigate through a single window.

Currently, I use =C-c l= to store Org-mode links, so I'm unable to use all of Vim's navigation. So I've settled for just moving up and down.

#+begin_src emacs-lisp
  (windmove-default-keybindings)
  (global-set-key (kbd "C-c k")    'windmove-up)
  (global-set-key (kbd "C-c j")  'windmove-down)
#+end_src

** Better mode-line status bar

There was a lot going on in my status bar. This package =smart-mode-line= does an excellent job in cleaning things up.

Here are the things I really liked:

- Displaying today's date, without the year, and day of the week
- Remove listing all my minor modes that take up a lot of space
- Giving enough room to display my clocked in tasks in other modes and files

Package: https://github.com/Malabarba/smart-mode-line/

#+begin_src emacs-lisp
  (use-package smart-mode-line
    :ensure t
    :init
    (sml/setup)
    :config
    (setq display-time-format "%a %m-%d %H:%M"
          sml/name-width '(20 . 70)
          sml/shorten-modes t
          sml/shorten-directory t
          sml/mode-width 'right)
    (display-time))
#+end_src

** Better copy paste of org-links

Keybindings with =C-c e= (export for use outside of Emacs) and =C-c E= (copy entire link).

#+begin_src emacs-lisp
  ;; Modified from https://emacs.stackexchange.com/a/50870/18898
  (defun etl/yank-org-link (text)
    (if (derived-mode-p 'org-mode)
        (insert text)
      (string-match org-bracket-link-regexp text)
      (insert (substring text (match-beginning 1) (match-end 1)))))

  (defun etl/org-copy-smart-url ()
    (interactive)
    (let* ((link-info (assoc :link (org-context)))
           (text (when link-info
                   (buffer-substring-no-properties
                    (or (cadr link-info) (point-min))
                    (or (caddr link-info) (point-max))))))
      (if (not text)
          (error "Not in org link")
        (add-text-properties 0
                             (length text)
                             '(yank-handler (etl/yank-org-link))
                             text)
        (kill-new text)))
    (message "Copied entire org link"))
  (global-set-key (kbd "C-c E") 'etl/org-copy-smart-url)

  (defun etl/org-export-url ()
    (interactive)
    (let* ((link-info (assoc :link (org-context)))
           (text (when link-info
                   (buffer-substring-no-properties
                    (or (cadr link-info) (point-min))
                    (or (caddr link-info) (point-max))))))
      (if (not text)
          (error "Not in org link")
        (string-match org-bracket-link-regexp text)
        (kill-new (substring text (match-beginning 1) (match-end 1)))))
    (message "Copied link to computer clipboard"))
  (global-set-key (kbd "C-c e") 'etl/org-export-url)
#+end_src

** Minor user experience changes

#+begin_src emacs-lisp
  ;; Remove startup messages
  (setq inhibit-startup-message t)
  (setq inhibit-startup-echo-area-message t)

  ;; Set higher garbage collection thresholds
  ;; https://blog.d46.us/advanced-emacs-startup/
  ;; https://github.com/purcell/emacs.d/blob/master/init.el
  ;; (let ((normal-gc-cons-threshold (* 20 1024 1024))
  ;;       (init-gc-cons-threshold (* 128 1024 1024)))
  ;;   (setq gc-cons-threshold init-gc-cons-threshold)
  ;;   (add-hook 'emacs-startup-hook
  ;;            (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))

  ;; Use y/n for yes/no
  ;; https://www.emacswiki.org/emacs/YesOrNoP
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Scroll slower
  (setq scroll-conservatively 100)

  ;; Stop bell from playing
  (setq ring-bell-function 'ignore)

  ;; Disable version control message
  (setq vc-handled-backends nil)

  ;; Word wrap long lines
  (global-visual-line-mode t)

  ;; Word wrap lines
  (setq-default word-wrap t)
  (setq-default fill-column 79)

  ;; Remove unnecessary toolbars, scrollbars, etc
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))

  ;; Use spaces instead of tabs
  ;; source: http://emacsblog.org/2007/09/30/quick-tip-spaces-instead-of-tabs/
  (setq-default indent-tabs-mode nil)

  ;; Toggle truncation of lines
  ;; https://stackoverflow.com/a/49692205/
  (global-set-key (kbd "C-x t") 'toggle-truncate-lines)

  ;; Show and highlight matching parentheses
  (show-paren-mode 1)

  ;; Show column number
  (setq column-number-mode t)

  ;; Highlights the current cursor line
  (global-hl-line-mode t)
  (set-face-background hl-line-face "color-248")

  ;; Display clock
  (display-time-mode 1)

  ;; Sentences end with one space
  (setq sentence-end-double-space nil)

  ;; Remove trailing whitespace when saving file
  (add-hook 'before-save-hook
            'delete-trailing-whitespace)

  ;; Save with end-of-file newline to keep things tidy
  (setq next-line-add-newlines t)

  ;; Remove lock files
  ;; https://erwtc.com/working-emacs-lock-files-and-syncthing/
  (setq create-lockfiles nil)

  ;; Quick keybinding to agenda
  (global-set-key (kbd "<f12>") 'org-agenda)
#+end_src

** Keybinding to configuration

I come to this configuration file so often, I should just make a shortcut key to this.

Inspired by https://github.com/DiegoVicen/my-emacs#define-keybindings-to-eval-buffer-on-init-and-open-readmeorg.

#+begin_src emacs-lisp
  (defun etl/reload-emacs-configuration()
    "Reload Emacs configuration file."
    (interactive)
    (load "~/.emacs.d/init.el"))

  (defun etl/open-emacs-configuration ()
    "Open the configuration README.org file in buffer."
    (interactive)
    (find-file "~/.emacs.d/README.org"))

  (global-set-key (kbd "C-c r") 'etl/reload-emacs-configuration)
  (global-set-key (kbd "C-c z") 'etl/open-emacs-configuration)
#+end_src

** Never lose the cursor

#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :diminish beacon-mode
    :config
    (setq beacon-blink-when-window-scrolls nil
          beacon-dont-blink-major-modes '(t pdf-view-mode)
          beacon-size 50
          beacon-blink-duration 0.4
          beacon-blink-delay 0.3)
    (beacon-mode 1))
#+end_src

** Highlight indentation

It can be difficult to follow indentation of code with lots of lines, so highlight those indentations.

GitHub: https://github.com/DarthFennec/highlight-indent-guides

#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :hook (prog-mode . highlight-indent-guides-mode)
    :config
    (setq highlight-indent-guides-method 'bitmap
          highlight-indent-guides-responsive 'top))
#+end_src

** Jump to matching parenthesis like in Vim

Source: https://www.gnu.org/software/emacs/manual/html_node/efaq/Matching-parentheses.html

#+begin_src emacs-lisp
  (global-set-key "%" 'match-paren)

  (defun match-paren (arg)
    "Go to the matching paren if on a paren; otherwise insert %."
    (interactive "p")
    (cond ((looking-at "\\s(") (forward-list 1) (backward-char 1))
          ((looking-at "\\s)") (forward-char 1) (backward-list 1))
          (t (self-insert-command (or arg 1)))))
#+end_src

* Custom functions

#+begin_src emacs-lisp
  ;; Run top within emacs
  ;; source: https://emacs.stackexchange.com/a/28088/
  (defun etl/top ()
    "Run top in eshell correctly."
    (interactive)
    (if (get-buffer "*top*")
      (switch-to-buffer "*top*")
      (ansi-term "/bin/bash" "top")
      (comint-send-string "*top*" "top\n")))

  ;; Add misc keybindings in org-brain visualize mode
  (defun etl/org-brain-hook ()
    "Miscellaneous keychords for org-brain mode."
    (visual-line-mode)
    (local-set-key (kbd "C-c b u") 'org-brain-update-id-locations)
    (local-set-key (kbd "C-c b s") 'org-brain-switch-brain))

  ;; Navigate a file randomly for spontaneous review
  (defun etl/goto-random-line ()
    "Visit random line in file."
    (interactive)
    (end-of-buffer)
    (goto-line (random (line-number-at-pos))))
  (global-set-key (kbd "C-c o e") 'etl/goto-random-line)
#+end_src

* Emacs development

Packages to help with development.

#+begin_src emacs-lisp
  ;; Modern list API
  (use-package dash :ensure t)

  ;; Hash table library
  (use-package ht :ensure t)

  ;; String library
  (use-package s :ensure t)
#+end_src

Structural editing of Lisp code.

#+begin_src emacs-lisp
  (use-package paredit
    :ensure t
    :hook ((emacs-lisp-mode . paredit-mode)
           (clojure-mode . paredit-mode)))
#+end_src

* Interface packages

** Try

Demo packages before committing by doing =M-x try= and then typing in a package to try temporarily.

#+begin_src emacs-lisp
  (use-package try
    :ensure t)
#+end_src

** Which-key

Help display key binding hints after typing in partial keybinding combinations.

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src

** Hungry-delete

Delete all white space when using backspace.

#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
#+end_src

** Ace-window

Have more control when switching windows.

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key (kbd "C-x O") 'other-frame)
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))
#+end_src

** Expand-region

Quickly select semantically meaningful regions with each press of =C-==. Typically, this would be more useful in programming.

#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :bind (("C-=" . 'er/expand-region)))
#+end_src

** Emojify

#+begin_quote
Display emojis in Emacs
#+end_quote

#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t
    :hook (after-init . global-emojify-mode))
#+END_SRC

** Dashboard

Will need to run =M-X all-the-icons-install-fonts= before icons will show up properly. In the future, maybe I'll create a hook/conditional to check for these icons being installed so the install will happen only once.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)

  (use-package dashboard
    :ensure t
    :init
    (dashboard-setup-startup-hook)
    (defun etl/switch-to-dashboard ()
      (interactive)
      (switch-to-buffer "*dashboard*"))
    (defun etl/read-lines (filepath)
      "Return a list of lines of a file at filepath."
      ;; http://ergoemacs.org/emacs/elisp_read_file_content.html
      (with-temp-buffer
        (insert-file-contents filepath)
        (split-string (buffer-string) "\n" t)))
    (defun etl/dashboard-insert-custom (list-size)
      (insert (all-the-icons-octicon (cdr (assoc 'registers dashboard-heading-icons))
                                     :height 1.2 :v-adjust 0.0 :face 'dashboard-heading)
              " Habits Checklist:\n")
      (insert "    Morning:   Stretch, breathe, music, review TODO, write out main tasks\n")
      (insert "    Afternoon: Walk, stretch, workout, review TODO\n")
      (insert "    Evening:   Review TODO"))
    :bind (("C-c o d" . 'etl/switch-to-dashboard)
           ("C-c o D" . 'dashboard-refresh-buffer))
    :config
    (setq dashboard-set-file-icons t
          dashboard-set-heading-icons t
          dashboard-startup-banner 'logo
          dashboard-set-init-info t
          dashboard-set-navigator t
          dashboard-banner-logo-title "Welcome to Your Dashboard"
          dashboard-items '((agenda . 10)
                            (recents . 5)
                            (projects . 5))
          show-week-agenda-p t)
    (if (file-exists-p "~/Sync/org/documents/quotes.txt")
        (setq dashboard-footer-messages
              (etl/read-lines "~/Sync/org/documents/quotes.txt")))
    (add-to-list 'dashboard-item-generators  '(custom . etl/dashboard-insert-custom))
    (add-to-list 'dashboard-items '(custom) t))
#+END_SRC

* Swiper/Ivy/Counsel

These are very similar packages that are found together. Here is a key of which package does what.

- Swiper :: Ivy-enhanced alternative to =isearch=
- Ivy :: generic completion mechanism for Emacs
- Counsel :: collection of Ivy-enhanced versions of common Emacs commands

In sum, they all contribute to making searching and completing text easier.

Using =counsel=, the =M-y= keybinding can be used to cycle through the kill ring. Similarly, the other keybindings listed below can be used to give lists of the respective functions (e.g., buffers).

I previously used =helm=, but found Ivy to be more useful immediately with a minimal configuration.

#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
      :map ivy-minibuffer-map
      ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t
          ivy-count-format "%d/%d "
          ivy-display-style 'fancy))

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper-isearch)
           ("C-r" . swiper-isearch)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+end_src

Notes:

- After using Ivy, can press `Tab` twice to complete directories instead of displaying a dired buffer

* IBuffer

Improved buffer management system by making the buffer list much nicer by grouping similar mode buffers together.

https://mytechrants.wordpress.com/2010/03/25/emacs-tip-of-the-day-start-using-ibuffer-asap/

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
    (quote (("default"
            ("dired" (mode . dired-mode))
            ("org" (name . "^.*org$"))
            ("magit" (mode . magit-mode))
            ("web" (or (mode . web-mode) (mode . js2-mode)))
            ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
            ("programming" (or
                            (mode . python-mode)))
            ("emacs" (or
                      (name . "^\\*scratch\\*$")
                      (name . "^\\*Messages\\*$")))
            ))))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)
#+end_src

* Avy

Powerful text search.

Similar to =ido= package where by you activate it with =M-s= and then specify a letter of where you want to go.

Also similar to the predecessor [[https://github.com/winterTTr/ace-jump-mode][=ace-jump-mode=]], but it appears [[https://emacsredux.com/blog/2015/07/19/ace-jump-mode-is-dead-long-live-avy/][Avy has "everything ace-jump does and more"]].

#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind (("M-s" . avy-goto-char)
           ("M-g f" . avy-goto-line)))
#+end_src

* Projectile and project management

- Source :: https://github.com/bbatsov/projectile
- Documentation :: https://docs.projectile.mx/en/latest/

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))

  (use-package counsel-projectile
    :ensure t
    :after (counsel projectile)
    :bind (("C-c p" . counsel-projectile))
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (counsel-projectile-mode))
#+end_src

* Quickly browse files and knowledge management

General purpose file search that is quick to narrow down files and notes.

See keybindings below for examples of what is possible. To access =deft=, press =C-c d d=.

#+begin_src emacs-lisp
  (use-package deft
    :ensure t
    :init
    (setq deft-directory "~/Sync/org/notes"
          deft-file-limit 75
          deft-recursive t))

  (use-package zetteldeft
    :ensure t
    :after deft
    :bind (("C-c d e" . 'etl/zetteldeft-ergodic)
           ("C-c d E" . 'etl/zetteldeft-wander-file))
    :init
    (defun etl/zetteldeft-ergodic ()
      "Find a random file in the deft directory."
      (interactive)
      (switch-to-buffer deft-buffer)
      (deft-filter-clear)
      (kill-new
       (zetteldeft--lift-id
        (nth (random (length (deft-find-all-files-no-prefix)))
             (deft-find-all-files-no-prefix)))
       nil)
      (deft-filter-yank))
    (defun etl/zetteldeft-ergodic-wander ()
      "TODO Randomly wander zettelkasten."
      (interactive))
    (defun etl/zetteldeft-wander-file ()
      "Find random link in current zetteldeft file."
      (interactive)
      (kill-new
       (zetteldeft--lift-id
        (nth (random (length (zetteldeft--extract-links (buffer-file-name))))
             (zetteldeft--extract-links (buffer-file-name))))
       nil)
      (switch-to-buffer deft-buffer)
      (deft-filter-clear)
      (deft-filter-yank))
    :config
    (zetteldeft-set-classic-keybindings))
#+end_src

* Company and auto-complete

** Company

General auto-complete and specifications here for how autocomplete works.

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    :config
    (setq company-minimum-prefix-length 2
          company-idle-delay 0.5
          company-selection-wrap-around t)
    (global-company-mode t))
#+end_src

When using autocomplete, it helps to have suggestions on what is possible and choose. This =company-quickhelp= solves this problem https://github.com/company-mode/company-quickhelp.

#+begin_src emacs-lisp
  ;; More quick help
  (use-package company-quickhelp
    :ensure t
    :disabled t
    :commands company-quickhelp-mode
    :init
    (progn
      (setq company-quickhelp-idle-delay 0.2)
      (add-hook 'after-init-hook 'company-quickhelp-mode)))
#+end_src

** Snippets

Sometimes I have some snippets of text I find myself using. So I can define some templates that can be quickly invoked with a tab.

#+begin_src emacs-lisp
  ;; Create snippet templates
  (use-package yasnippet
    :ensure t
    :commands (yas-global-mode)
    :config
    (add-to-list #'yas-snippet-dirs "~/Sync/org/snippets")
    (yas-reload-all)
    (use-package yasnippet-snippets
      :ensure t
      :init
      (autoload 'yasnippet-snippets-initialize "yasnippet-snippets" nil t)
      (eval-after-load 'yasnippet #'yasnippet-snippets-initialize))
    (yas-global-mode))

  ;; Optional settings to use yas-minor-mode on per-buffer basis
  ;; (yas-reload-all)
  ;; (add-hook 'prog-mode-hook #'yas-minor-mode)
#+end_src

** Abbreviations

Emacs has an abbreviation mode, so here is a list of abbreviations I find useful. These automatically expand unless you press =Ctrl+q= before typing a space or punctuation.

#+begin_src emacs-lisp
  ;; Clear previous table
  (clear-abbrev-table global-abbrev-table)
  (setq abbrev-file-name "~/.emacs.d/abbrev_defs")
  (setq save-abbrevs 'silent)  ;; Save abbrevs when files are saved

  (define-abbrev-table 'global-abbrev-table
    '(
      ;; Net abbreviations
      ("afaik" "as far as I know")
      ("btw" "by the way")

      ;; English word abbreviations
      ("bc" "because")

      ;; Tech
      ("sto" "StackOverflow")
      ))

  (set-default 'abbrev-mode t)
#+end_src

* Magit and Git

The [[https://magit.vc/][tagline]] is to be "a Git porcelain inside Emacs". I have yet to get to that level yet, but imagining version control tasks at the tip of my fingers with keybindings makes this sound amazing. [[https://emacsair.me/2017/09/01/magit-walk-through/][Here]] is a walk through of how to use essential functions in magit.

This all gets activated using the keybinding =C-x g= while in a git repository.

#+begin_src emacs-lisp
  ;; General git wrapper
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status))
    :custom
    (git-commit-summary-max-length 50)
    (git-commit-fill-column 72))
#+end_src

Interactive understanding of file changes across commits.

#+begin_src emacs-lisp
  (use-package git-timemachine
    :ensure t)
#+end_src

See subtle markers for line changes.

#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode t))
#+end_src

* Markdown

#+begin_src emacs-lisp
  ;; Create major mode for editing Markdown-formatted text
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.txt\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))

  ;; Another org-mode exporter via pandoc
  (use-package ox-pandoc
    :ensure t
    :init
    (with-eval-after-load 'org '(require 'ox-pandoc)))

  ;; Create multiple major modes for different langauges
  ;; Inspired by
  ;; - https://github.com/SteveLane/dot-emacs/blob/master/packages-polymode.el
  ;; - http://johnstantongeddes.org/open%20science/2014/03/26/Rmd-polymode.html
  (use-package polymode
    :config
    (use-package poly-R
      :after ess)
    (use-package poly-noweb
      :mode (("\\.Rnw" . poly-noweb+r-mode)
             ("\\.rnw" . poly-noweb+r-mode)))
    (use-package poly-markdown
      :mode (("\\.Rmd" . poly-markdown+r-mode))
      :config
      ;; Wrap lines at column limit, but don't put hard returns in
      (add-hook 'markdown-mode-hook (lambda () (visual-line-mode 1)))
      ;; Flyspell on
      (add-hook 'markdown-mode-hook (lambda () (flyspell-mode 1)))))
#+end_src

* Prose and writing

#+begin_src emacs-lisp
  ;; Improve writing with tips from
  ;; http://matt.might.net/articles/shell-scripts-for-passive-voice-weasel-words-duplicates/
  (use-package writegood-mode
    :ensure t
    :bind (("C-c g" . 'writegood-mode)
           ("C-c C-g g" . 'writegood-grade-level)
           ("C-c C-g e" . 'writegood-reading-ease))
    :init
    (add-hook 'markdown-mode-hook 'writegood-mode))

  ;; flycheck for syntax checking
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))

  ;; Help define words
  (use-package define-word
    :ensure t
    :bind (("C-c d w" . 'define-word-at-point)
           ("C-c d W" . 'define-word)))

  ;; Completions for academic phrases
  (use-package academic-phrases
    :ensure t
    :bind (("C-c u a" . 'academic-phrases)
           ("C-c u s" . 'academic-phrases-by-section)))

  ;; Avoid cliches and bad grammar
  (use-package artbollocks-mode
    :ensure t
    :config
    (add-hook 'text-mode-hook 'artbollocks-mode)
    (progn
      (setq artbollocks-weasel-words-regex
            (concat "\\b" (regexp-opt
                           '("one of the"
                             "should"
                             "just"
                             "sort of"
                             "a lot"
                             "probably"
                             "maybe"
                             "perhaps"
                             "I think"
                             "really"
                             "pretty"
                             "nice"
                             "action"
                             "utilize"
                             "leverage") t) "\\b"))))

  ;; Thesaurus
  (use-package popup)
  (use-package synosaurus
    :ensure t
    :disabled
    :config
    (setq synosaurus-choose-method 'popup)
    (setq synosaurus-backend ""))
#+end_src

* Internet browsing

I want a place where my attention isn't always seduced by the internet. Using a text-based browser is my dream to make it more difficult to mind wander.

Help and examples:

- http://beatofthegeek.com/2014/02/my-setup-for-using-emacs-as-web-browser.html

#+begin_src emacs-lisp
  (use-package w3m
    :ensure t
    :bind (("C-c w" . 'w3m)
           ("C-x m" . 'browse-url-at-point))
    :config
    (setq w3m-use-cookies t
          w3m-cookie-accept-bad-cookies t
          w3m-use-tab t
          w3m-fill-column 80
          w3m-home-page "https://duckduckgo.com")
    (setq browse-url-browser-function 'w3m-goto-url-new-session)  ;; Default to w3m
    (autoload 'w3m-browse-url "w3m" "Ask a WWW browser to show a URL." t)
    (autoload 'w3m-region "w3m" "Render region in current buffer and replace with result." t)
    (setq w3m-coding-system 'utf-8
          w3m-file-coding-system 'utf-8
          w3m-file-name-coding-system 'utf-8
          w3m-input-coding-system 'utf-8
          w3m-output-coding-system 'utf-8
          w3m-terminal-coding-system 'utf-8))
#+end_src

* Org-mode

I was inspired by [[https://www.reddit.com/r/emacs/comments/4gudyw/help_me_with_my_orgmode_workflow_for_notetaking/d2l16uj/][this r/emacs subreddit answer]] on how to take notes.

As of 2020-06-04, there seems to be some weird bug where I get some =dbus= error whenever I set an effort time on a task and go over that time limit. One solution as been to follow some of the [[https://emacs.stackexchange.com/questions/55483][comments here]].

For clocking in tasks in Org-mode, I took a lot of inspiration and learned a lot from [[https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html][this post here]].

** Basic setup

Note, =org-plus-contrib= is not a package, but rather, it is a wrapper package
around other contributed packages. Thus it cannot be loaded using =use-package=
in the traditional sense. A work around here is to [[https://github.com/jwiegley/use-package/issues/597#issuecomment-352898477][make it a dependency of =org=]].

#+begin_src emacs-lisp
  ;; Additional org functions for checklist handling
  ;; https://orgmode.org/worg/org-contrib/org-checklist.html
  ;; Install org-plus-contrib separately
  (use-package org
    :ensure org-plus-contrib
    :pin org
    :bind (("C-c l" . 'org-store-link)
           ("C-c a" . 'org-agenda)
           ("C-c c" . 'org-capture)
           ("C-c b" . 'org-iswitchb)
           ("C-c t" . 'org-time-stamp-inactive)
           ("<f12>" . 'org-agenda))
    :config
    (setq org-startup-indented t
          org-startup-folder t
          org-hide-leading-stars t
          ;; Remove requirement of confirmation for evaluating
          org-confirm-babel-evaluate nil
          org-use-fast-todo-selection t)
    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                  (sequence "WAITING(w)"
                            "PROJECT(p)"
                            "MAYBE(m)"
                            "|"
                            "CANCELLED(c)")))))

  ;; Set up org mode
  (if (file-directory-p "~/Sync/org")
      (setq org-directory "~/Sync/org/"
            org-agenda-files '("~/Sync/org/gtd.org"
                               "~/Sync/org/reminders.org"))
      (setq org-default-notes-file (concat org-directory "inbox.org")))
  (setq org-log-done t)
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
  (setq org-agenda-inhibit-startup t) ; Inhibit startup options to speed up agenda

  ;; Set up refile targets
  (setq org-refile-targets '((org-agenda-files :maxlevel . 2)))
  (setq org-outline-path-complete-in-steps nil) ; Refile in a single go
  (setq org-refile-use-outline-path t)          ; Show full paths for refiling
  (setq org-refile-allow-creating-parent-nodes 'confirm) ; New parents on refile

  ;; Define tags available
  (setq org-tag-alist
        '(("ongoing" . ?o)
          ("flag" . ?f)
          ("writing" . ?w)
          ("random" . ?r)
          ("nobrain" . ?n)
          ("childless" . ?l)
          ("readend" . ?e)
          ("task" . ?t)))

  ;; Load Markdown exporter
  ;; source: https://stackoverflow.com/a/22990257/6873133
  (eval-after-load "org" '(require 'ox-md nil t))

  ;; Enable native fontification in code blocks
  (setq org-src-fontify-natively t)

  ;; Change column width for habit graph
  (setq org-habit-graph-column 63)

  (setq org-modules '(org-habit))
  (eval-after-load 'org
   '(org-load-modules-maybe t))

  ;; Define stuck projects
  (setq org-stuck-projects
        '("+LEVEL=2/-DONE" ;; Tags/TODO/property matcher string
          ("TODO" "NEXT" "NEXTACTION") ;; List of TODO keywords of non-stuck projects
          ("childless") ;; List of tags for non-stuck projects
          "")) ;; Arbitrary regulary expresion for non-stuck projects

  ;; Place tags close to the right-hand side of the window
  ;; https://lists.gnu.org/archive/html/emacs-orgmode/2010-12/msg00410.html
  (defun etl/place-agenda-tags ()
    "Put the agenda tags by the right border of the agenda window."
    (setq org-agenda-tags-column (- 4 (window-width)))
    (org-agenda-align-tags))
  (add-hook 'org-finalize-agenda-hook 'etl/place-agenda-tags)

  ;; Modify agenda to be facilitate getting things done
  ;; https://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html
  ;; https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html
  (defun etl/org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))
  ;; TODO WIP
  ;; Modified from https://stackoverflow.com/a/10091330/6873133
  (defun etl/org-agenda-skip-tag (tag &optional others)
    "Skip all entries that correspond to TAG.

  If OTHERS is true, skip all entries that do not correspond to TAG."
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (current-headline (or (and (org-at-heading-p)
                                     (point))
                                (save-excursion (org-back-to-heading)))))
      (if others
          (if (not (member tag (org-get-tags-at current-headline)))
              next-headline
            nil)
        (if (member tag (org-get-tags-at current-headine))
            next-headline
          nil))))
  (defun etl/org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))
  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (tags-todo "inbox" ((org-agenda-files '("~/Sync/org/inbox.org"))))
            (agenda "")
            (alltodo ""
                     ((org-agenda-skip-function
                       '(or (etl/org-skip-subtree-if-priority ?A)
                            (etl/org-skip-subtree-if-habit)
                            (org-agenda-skip-entry-if 'regexp "[[:digit:]]\{4\} - .*")
                            (org-agenda-skip-entry-if 'todo '("WAITING"
                                                              "MAYBE"
                                                              "PROJECT"))
                            (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "All normal priority tasks:"))))
           ((org-agenda-compact-blocks t)))
          ("W" "Weekly Review"
           ((agenda "" ((org-agenda-span 7))) ; Review upcoming deadlines
            (stuck "") ; Review stuck tasks that aren't maybe
            (todo "PROJECT") ; Review all projects being TODO items
            (todo "MAYBE") ; Review someday/maybe items
            (todo "WAITING") ; Review waiting items
            ))))

  ;; Org-mode exporters
  (require 'ox-taskjuggler) ;; Taskjuggler exporter
  (require 'ox-freemind) ;; Freemind mindmapping
#+end_src

** Clocking time display

When clocking in tasks, I like how Emacs reminds me of the task in the bottom right corner. However, if the task name is too long, Emacs will just truncate it and I cannot read it. This code modifies the length of the task so that it can be seen just enough https://stackoverflow.com/a/14527487/6873133.

#+begin_src emacs-lisp
  (setq org-clock-report-include-clocking-task t)
  (setq org-clock-heading-function
        (lambda ()
          (let ((str (nth 4 (org-heading-components))))
            (if (> (length str) 6)
                (substring str 0 6)))))

  ;; If idle for more than 15 minutes, resolve the things by asking what to do
  ;; with the clock time
  (setq org-clock-idle-time 15)
#+end_src

** Org-mode templates

#+begin_src emacs-lisp
  ;; Setup org-capture templates
  (setq org-capture-templates (quote (
      ;; Capture article summaries
      ("a"              ; key
       "Article"        ; name
       entry            ; type
       (file+headline "~/Sync/org/phd.org" "To Sort") ; target
       (file "~/Sync/org/templates/article.orgcaptempl") ; template
       :prepend t       ; properties
       :empty-lines 1   ; properties
       :created t       ; properties
      )
      ;; Capture notes and reference material
      ("n"
       "Note"
       entry
       (file+olp "~/Sync/org/inbox.org" "Tasks")
       (file "~/Sync/org/templates/note.orgcaptempl")
      )
      ;; Capture reading materials
      ("d"
       "To Read"
       entry
       (file+olp "~/Sync/org/read.org" "Read Queue")
       (file "~/Sync/org/templates/read.orgcaptempl")
      )
      ;; Capture incoming tasks
      ("t"
       "Task"
       entry
       (file+olp "~/Sync/org/inbox.org" "Tasks")
       (file "~/Sync/org/templates/task.orgcaptempl")
      )
      ;; Journaling
      ("j"
       "Journal"
       entry
       (file "~/Sync/org/journal.org")
       (file "~/Sync/org/templates/journal.orgcaptempl")
      )
      ;; Journaling
      ("r"
       "Weekly Review"
       entry
       (file "~/Sync/org/weekly.org")
       (file "~/Sync/org/templates/weekly.orgcaptempl")
      )
      ;; Research and project ideas
      ("i"
       "Research and Project Ideas"
       entry
       (file "~/Sync/org/ideas.org")
       (file "~/Sync/org/templates/research.orgcaptempl")
      )
  )))
#+end_src

** Contact information

Use org-mode for managing contact information https://www.reddit.com/r/emacs/comments/8toivy/tip_how_to_manage_your_contacts_with_orgcontacts/.

#+begin_src emacs-lisp
  (use-package org-contacts
    :ensure nil
    :after org
    :config
    (setq org-contacts-file '("~/Sync/org/contacts.org")))
#+end_src

** Add effort estimate when clocking in

Without me having to remember to assign an effort for tasks, this will automatically ask me for an effort estimate when clocking in.

Source: https://orgmode.org/worg/org-hacks.html#orgfa7a73a

#+begin_src emacs-lisp
  (add-hook 'org-clock-in-prepare-hook
            'etl/my-org-mode-ask-effort)

  (defun etl/my-org-mode-ask-effort ()
    "Ask for an effort estimate when clocking in."
    (unless (org-entry-get (point) "Effort")
      (let ((effort
             (completing-read
              "Effort: "
              (org-entry-get-multivalued-property (point) "Effort"))))
        (unless (equal effort "")
          (org-set-property "Effort" effort)))))
#+end_src

** Org-brain

Use org-mode for concept mapping. This currently is only useful for managing the citation graph of my journal articles. In the future, I may need to update this to solely work for my articles.

#+begin_src emacs-lisp
  (use-package org-brain
    :ensure t
    :init
    (defun etl/org-mode-hook ()
      "Miscellaneous keychords for org-mode"
      (visual-line-mode)
      (local-set-key (kbd "C-c b v") 'org-brain-visualize)
      (local-set-key (kbd "C-c b i") 'org-id-get-create))
    (if (file-directory-p "~/Sync/org/brain")
        (setq org-brain-path "~/Sync/org/brain"))
    (add-hook 'org-brain-visualize-mode-hook 'etl/org-brain-hook)
    (add-hook 'org-mode-hook 'etl/org-mode-hook)
    :config
    (setq org-id-track-globally t
          org-id-locations-files "~/.emacs.d/.org-id-locations"
          org-brain-visualize-default-choices 'all
          org-brain-title-max-length 12
          org-brain-file-entries-use-title nil))
#+end_src

** Pomodoro

Use a simple implementation of  pomodoro within org-mode clock-in and outs https://github.com/marcinkoziej/org-pomodoro.

#+begin_src emacs-lisp
  (use-package org-pomodoro
    :ensure t)
#+end_src

** Babel languages

Load Babel languages separately because each language is loaded at the beginning https://blog.d46.us/advanced-emacs-startup/.

#+begin_src emacs-lisp
  ;; Active Babel languages
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((awk . t)
      (css . t)
      (emacs-lisp . t)
      (js . t)
      (python . t)
      (R . t)
      (shell . t)
      (sql . t)
     )
    )
#+end_src

** Idle timer for automatic agenda views

https://orgmode.org/worg/org-hacks.html#orga7f07e8

#+begin_src emacs-lisp
  (defun etl/jump-to-org-agenda ()
    "Open up Org agenda when idle."
    (interactive)
    (let ((buf (get-buffer "*Org Agenda*"))
          wind)
      (if buf
          (if (setq wind (get-buffer-window buf))
              (select-window wind)
            (if (called-interactively-p)
                (progn
                  (select-window (display-buffer buf t t))
                  (org-fit-window-to-buffer)
                  ;; (org-agenda-redo)
                  )
              (with-selected-window (display-buffer buf)
                (org-fit-window-to-buffer)
                ;; (org-agenda-redo)
                )))
        (call-interactively 'org-agenda-list)))
    ;;(let ((buf (get-buffer "*Calendar*")))
    ;;  (unless (get-buffer-window buf)
    ;;    (org-agenda-goto-calendar)))
    )

  ;; Idle time is 600 seconds / 60 = 10 minutes
  (run-with-idle-timer (* 60 15) t 'etl/jump-to-org-agenda)
#+end_src

** Refresh agenda view regularly

Typically, my agenda view gets out of date. This piece of code will automatically refresh it every hour.

Source https://orgmode.org/worg/org-hacks.html#org7e4980d

#+begin_src emacs-lisp
  (defun etl/org-agenda-redo-in-other-window ()
    "Call org-agenda-redo function even in the non-agenda buffer."
    (interactive)
    (let ((agenda-window (get-buffer-window org-agenda-buffer-name t)))
      (when agenda-window
        (with-selected-window agenda-window (org-agenda-redo)))))
  (run-at-time nil 3600 'etl/org-agenda-redo-in-other-window)
#+end_src

** Rifle through org buffers quickly

#+begin_quote
Rifle through your Org-mode buffers and acquire your target
#+end_quote

Run =M-x helm-org-rifle= to get started.

Source: https://github.com/alphapapa/org-rifle

#+BEGIN_SRC emacs-lisp
  (use-package helm-org-rifle
    :disabled
    :bind (("C-c o r" . 'helm-org-rifle))
    :config
    (use-package helm))
#+END_SRC

** Use org-journal for work journaling

It'll be nice to consolidate notes during the day in note form through org-mode. This can complement the work I do using calendars.

While in a journal file, =C-c C-o j= will activate a number of options to use. These entries are linked to the agenda, so doing =M-x calendar= gives a number of keybindings that [[https://github.com/bastibe/org-journal#basic-usage][can be seen here]].

GitHub: https://github.com/bastibe/org-journal

#+begin_src emacs-lisp
  (use-package org-journal
    :ensure t
    :bind ("C-c n j" . org-journal-new-entry)
    :config
    (setq org-journal-dir "~/Sync/org/journal/"
          org-journal-file-format "%Y-%m-%d.org"
          org-journal-date-format "%e %b %Y (%A)"
          org-journal-time-format "%R "))
#+end_src

** Custom org-mode hooks

#+begin_src emacs-lisp
  ;; Separate fill-column value for org-mode
  ;; source: https://emacs.stackexchange.com/a/29063/
  (add-hook 'org-mode-hook (lambda () (setq fill-column nil)))

  ;; Hook to change visual view of agenda
  ;; source: https://superuser.com/a/531670/
  (add-hook 'org-agenda-mode-hook
            (lambda ()
              (visual-line-mode t)
              (toggle-truncate-lines nil)))

  ;; Add custom keybindings in org-brain visualize mode

  ;; Setup org-mode useful hooks
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'auto-fill-mode)
#+end_src

* Elfeed

#+begin_src emacs-lisp
  ;; Shortcut functions to certain feeds
  ;; Need to create these bookmarks manually using C-x r m whenever in the
  ;; filtered result. Then type in the bookmark name e.g. elfeed-all
  ;; http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/
  (defun etl/elfeed-show-all ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-all"))
  (defun etl/elfeed-show-emacs ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-emacs"))
  (defun etl/elfeed-show-daily ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-daily"))
  (defun etl/elfeed-show-dev ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-dev"))
  (defun etl/elfeed-show-academic ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-academic"))
  (defun etl/elfeed-show-microbiome ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-microbiome"))

  ;; Mark all as read
  (defun elfeed-mark-all-as-read ()
    (interactive)
    (mark-whole-buffer)
    (elfeed-search-untag-all-unread))

  ;; Load database from disk before updating
  (defun etl/elfeed-load-db-and-open ()
    "Load the elfeed db from disk before updating."
    (interactive)
    (elfeed)
    (elfeed-db-load)
    (elfeed-search-update--force)
    (elfeed-update))

  ;; Write to disk when quitting
  (defun etl/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))

  ;; Use org file to organize RSS feeds
  ;; http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/
  (use-package elfeed
    :ensure t
    :bind (("C-x w" . 'elfeed))
    :config
    (setq elfeed-db-directory "~/Sync/org/elfeed/")
    :bind (:map elfeed-search-mode-map
                ("A" . etl/elfeed-show-all)
                ("E" . etl/elfeed-show-emacs)
                ("D" . etl/elfeed-show-daily)
                ("V" . etl/elfeed-show-dev)
                ("C" . etl/elfeed-show-academic)
                ("M" . etl/elfeed-show-microbiome)
                ("q" . etl/elfeed-save-db-and-bury)))
  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/Sync/org/elfeed/feed.org")))
  (use-package elfeed-goodies
    :ensure t
    :config
    (elfeed-goodies/setup))
#+end_src

* Emacs Speaks Statistics (ESS)

Let Emacs do some statistics.

#+begin_src emacs-lisp
  (use-package ess
    :ensure t
    :config
    (setq ess-style 'RStudio
          ess-eval-visibly nil  ;; Don't print evaluated commands
          ess-ask-for-ess-directory nil)  ;; Don't prompt whenever starting
    (use-package ess-smart-underscore
      :ensure t))
#+end_src

* Python

Notes on using use-package
https://github.com/howardabrams/dot-files/blob/master/emacs-python.org

https://realpython.com/emacs-the-best-python-editor/

#+begin_src emacs-lisp
  ;; General environment
  (use-package elpy
    :ensure t
    :init
    (advice-add 'python-mode :before 'elpy-enable))

  ;; Auto format Python files using PEP8
  ;; Note, need to install autopep8 first
  ;; https://pypi.org/project/autopep8/
  (use-package py-autopep8
    :ensure t
    :init
    (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))

  ;; company-mode completion back-end for Python
  ;;(use-package company-jedi
  ;;  :ensure t
  ;;  :init
  ;;  (add-hook 'python-mode-hook (lambda () (add-to-list 'company-backends 'company-jedi))))

  ;; Set to Python 3
  (if (file-exists-p "~/miniconda/bin/python3")
      (setq python-shell-interpreter "~/miniconda/bin/python3"))
  (if (file-exists-p "~/miniconda3/bin/python3")
      (setq python-shell-interpreter "~/miniconda3/bin/python3"))

  ;; Disable offset message
  ;; https://emacs.stackexchange.com/a/47366/18898
  (setq python-indent-guess-indent-offset-verbose nil)
#+end_src

For Jedi, it will require running =M-x jedi:install-server= to work first.

* macOS configurations

#+begin_src emacs-lisp
  ;; I prefer cmd key for meta
  (setq mac-option-key-is-meta nil
        mac-command-key-is-meta t
        mac-command-modifier 'meta
        mac-option-modifier 'none)

  ;; Add brew installed package path
  (add-to-list 'exec-path "/usr/local/bin")
#+end_src

* Web development

More on =web-mode= http://web-mode.org/.

#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
          '(("django"    . "\\.html\\'")))
    (setq web-mode-ac-sources-alist
          '(("css" . (ac-source-css-property))
            ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
            ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (setq web-mode-enable-auto-closing t))
  (setq web-mode-enable-auto-quoting t)
#+end_src

* Mind mapping

Creates mind maps, defined here as directed graphs, through GraphViz.

https://github.com/the-humanities/org-mind-map

#+begin_src emacs-lisp
  (use-package org-mind-map
    :init
    (require 'ox-org)
    :defer t
    :config
    (setq org-mind-map-engine "dot"))
#+end_src

* Reference managing

Resources:
- [[https://github.com/jkitchin/org-ref/blob/master/org-ref.org][org-ref - GitHub]]
- [[http://kitchingroup.cheme.cmu.edu/blog/2014/05/13/Using-org-ref-for-citations-and-references/][Using org-ref for citations and references (2014)]]
- [[http://kitchingroup.cheme.cmu.edu/blog/2014/05/15/Using-org-ref-to-keep-your-bibtex-files-in-order/][Using org-ref to keep your bibtex files in order (2014)]]

#+begin_src emacs-lisp
  ;; Org-mode bibliography reference management
  (use-package org-ref
    :ensure t)

  ;; Minor mode to interleave notes and textbooks
  (use-package interleave
    :defer t)

  ;; Search and manage bibliographies in Emacs
  (use-package helm-bibtex
    :ensure t)

  ;; Setup bibliography workflow for notetaking
  ;; https://www.reddit.com/r/emacs/comments/4gudyw/d2l16uj/
  (let ((default-directory "~/Sync/org/references/"))
    (setq org-ref-notes-directory (expand-file-name "notes")
          org-ref-bibliography-notes (expand-file-name "articles.org")
          org-ref-default-bibliography (expand-file-name "articles.bib")
          org-ref-pdf-directory "~/Sync/zotero/"))

  ;; Setup management of bibliographies
  (let ((default-directory "~/Sync/org/references/"))
    (setq helm-bibtex-bibliography (expand-file-name "articles.bib")
          helm-bibtex-library-path "~/Sync/zotero/"
          helm-bibtex-notes-path (expand-file-name "articles.org")))

  ;; Setup bibliography path
  (setq bibtex-completion-bibliography
        '("~/Sync/org/references/articles.bib"))

  ;; Setup where PDFs can be found
  (setq bibtex-completion-library-path
        '("~/Sync/zotero"))

  ;; Setup auto-formatting of citation
  (setq bibtex-autokey-year-length 4
        bibtex-autokey-name-year-separator ""
        bibtex-autokey-year-title-separator ""
        bibtex-autokey-titleword-separator ""
        bibtex-autokey-titlewords 3
        bibtex-autokey-titlewords-stretch 1)

  ;; Add keybindings for org-ref
  (defun etl/org-ref-hook ()
    (visual-line-mode)
    (local-set-key (kbd "C-c r c") 'org-ref-clean-bibtex-entry)
    (local-set-key (kbd "C-c r l") 'crossref-lookup)
    (local-set-key (kbd "C-c r a") 'crossref-add-bibtex-entry)
    (local-set-key (kbd "C-c r o") 'org-ref-open-bibtex-notes))
  (defun etl/interleave ()
    (visual-line-mode)
    (local-set-key (kbd "C-c i m") 'interleave-mode))

  ;; Setup org-ref useful hooks
  (add-hook 'bibtex-mode-hook 'etl/org-ref-hook)
  (add-hook 'org-mode-hook 'etl/interleave)
#+END_SRC

Temporary change because of updates to org-ref that break =org-ref-open-bibtex-notes()=, so below is the [[https://github.com/jkitchin/org-ref/blob/75d83ea014e530591cfdafc591b9b1c44509d035/org-ref-core.el#L2697-L2751][code before the breaking change]].

#+BEGIN_SRC emacs-lisp
  (defun org-ref-open-bibtex-notes ()
    "From a bibtex entry, open the notes if they exist.
  If the notes do not exist, then create a heading.
  I never did figure out how to use reftex to make this happen
  non-interactively.  the `reftex-format-citation' function did not
  work perfectly; there were carriage returns in the strings, and
  it did not put the key where it needed to be.  so, below I replace
  the carriage returns and extra spaces with a single space and
  construct the heading by hand."
    (interactive)

    (bibtex-beginning-of-entry)
    (let* ((cb (current-buffer))
           (bibtex-expand-strings t)
           (entry (cl-loop for (key . value) in (bibtex-parse-entry t)
                           collect (cons (downcase key) (s-collapse-whitespace value))))
           (key (reftex-get-bib-field "=key=" entry)))

      ;; save key to clipboard to make saving pdf later easier by pasting.
      (with-temp-buffer
        (insert key)
        (kill-ring-save (point-min) (point-max)))

      ;; now look for entry in the notes file
      (save-restriction
        (if  org-ref-bibliography-notes
            (find-file-other-window org-ref-bibliography-notes)
          (error "org-ref-bibliography-notes is not set to anything"))

        (widen)
        (goto-char (point-min))
        (let* ((headlines (org-element-map
                              (org-ref-parse-buffer)
                              'headline 'identity))
               (keys (mapcar
                      (lambda (hl) (org-element-property :CUSTOM_ID hl))
                      headlines)))
          ;; put new entry in notes if we don't find it.
          (if (-contains? keys key)
              (progn
                (org-open-link-from-string (format "[[#%s]]" key))
                (funcall org-ref-open-notes-function))
            ;; no entry found, so add one
            (goto-char (point-max))
            (insert (org-ref-reftex-format-citation
                     entry (concat "\n" org-ref-note-title-format)))
            (mapc (lambda (x)
                    (save-restriction
                      (save-excursion
                        (funcall x))))
                  org-ref-create-notes-hook)
            (save-buffer))))))
#+end_src

* Cheat sheets

Amazing command line cheatsheet http://cht.sh/, but in Emacs form.

#+begin_src emacs-lisp
  (use-package cheat-sh
    :ensure t
    :bind (("C-c ?" . cheat-sh)))
#+end_src

* ERC

Let's use IRC to chat https://www.gnu.org/software/emacs/manual/html_mono/erc.html.

#+begin_src emacs-lisp
  (eval-after-load "erc"
    '(progn
       (setq erc-nick "erictleung")
       (setq erc-user-full-name "Eric Leung")
       (setq erc-autojoin-channels-alist
             '(("irc.freenode.net" "#python")))))

  (defun etl/my-erc ()
    "Initialize IRC server connection."
    (interactive)
    (erc-tls
     :server "irc.freenode.net"
     :port 7000))
#+end_src

* LaTeX

Miscellaneous tools to interact with LaTeX documents.

#+begin_src emacs-lisp
  (use-package auctex
    :defer 10)
#+end_src

* Finances and command line ledger

Use plain text for accounting system =ledger=.

- =ledger= GitHub https://github.com/ledger/ledger
- Documentation https://www.ledger-cli.org/docs.html
- More info https://plaintextaccounting.org/

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :bind (("C-c f e" . ledger-jentry)
           ("C-c f j" . ledger-run-command))
    :mode "\\.ledger\\'"
    :config
    (add-hook 'ledger-mode-hook
              (lambda ()
                (setq-local tab-always-indent 'complete)
                (setq-local completion-cycle-threshold t)
                (setq-local ledger-complete-in-steps t))))
#+END_SRC

* Miscellaneous

Just some miscellaneous packages or configurations that don't warrant an entire section itself.

** Emacs shell

Quickly run Emacs shell with keybinding of =C-c s=.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c s") 'eshell)
#+end_src

** xkcd

xkcd reader in Emacs https://github.com/vibhavp/emacs-xkcd.

#+begin_src emacs-lisp
  (use-package xkcd
    :ensure t)
#+end_src

** htmlize

Convert buffer text and decorations to HTML.

#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src

* Clean up

Reset debugging from the beginning and display how long setup took.

#+begin_src emacs-lisp
  (setq debug-on-error nil)
  (setq debug-on-quit nil)

  (let ((elapsed (float-time (time-subtract (current-time)
                                            emacs-start-time))))
    (message "Loading settings...done (%.3fs)" elapsed))
  (put 'narrow-to-region 'disabled nil)
#+end_src

* Resources and tried packages

*General resources*

- https://github.com/zamansky/using-emacs/

*Tried packages*

- =org-drill= :: went with Anki because more convenient
- =helm= :: replaced with =ivy= instead
- =anki-enditor= :: works really well, just felt it easier to maintain directly from Anki because it already has a backup system; if I ever need it or want to help guide someone else https://yiufung.net/post/anki-org/.

*No interest packages*

- =org-dashboard= :: too much setup to categorize headings to sum up; not to be confused with =emacs-dashboard=
- =org-bullets= :: not maintained; alternative =org-superstar-mode= not needed as well
- =rich-minority= :: hiding minor-modes https://github.com/Malabarba/rich-minority, but already have it with =smart-mode-line=
